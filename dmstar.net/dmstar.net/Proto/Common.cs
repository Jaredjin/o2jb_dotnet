// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace dmstar.net.Proto {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SBXByb3RvIgcKBUVtcHR5IjgKClJlcVdyYXBwZXIS",
            "HAoEY29kZRgBIAEoDjIOLnByb3RvLk1zZ0NvZGUSDAoEZGF0YRgCIAEoDCI4",
            "CgpSZXNXcmFwcGVyEg8KB3N1Y2Nlc3MYASABKAgSCwoDbXNnGAIgASgJEgwK",
            "BGRhdGEYAyABKAwi8QMKDkpkYmNEYXRhQ29sdW1uEg8KB29yZGluYWwYASAB",
            "KAUSEQoJdGFibGVOYW1lGAIgASgJEhIKCnNjaGVtYU5hbWUYAyABKAkSEwoL",
            "Y2F0YWxvZ05hbWUYBCABKAkSEgoKY29sdW1uTmFtZRgFIAEoCRITCgtjb2x1",
            "bW5MYWJlbBgGIAEoCRIZChFjb2x1bW5EaXNwbGF5U2l6ZRgHIAEoBRIXCg9j",
            "b2x1bW5QcmVjaXNpb24YCCABKAUSEwoLY29sdW1uU2NhbGUYCSABKAUSFAoM",
            "ZGF0YVR5cGVOYW1lGAogASgJEhkKEWRhdGFUeXBlQ2xhc3NOYW1lGAsgASgJ",
            "EhQKDGRhdGFUeXBlQ29kZRgMIAEoBRIXCg9pc0F1dG9JbmNyZW1lbnQYDSAB",
            "KAgSFwoPaXNDYXNlU2Vuc2l0aXZlGA4gASgIEhwKFGlzRGVmaW5pdGVseVdy",
            "aXRhYmxlGA8gASgIEhQKDGlzU2VhcmNoYWJsZRgQIAEoCBISCgppc051bGxh",
            "YmxlGBEgASgFEhEKCWlzQWxpYXNlZBgSIAEoCBISCgppc1dyaXRhYmxlGBMg",
            "ASgIEhIKCmlzQ3VycmVuY3kYFCABKAgSEgoKaXNSZWFkT25seRgVIAEoCBIQ",
            "Cghpc1NpZ25lZBgWIAEoCCIxCgtKZGJjRGF0YVJvdxIiCgVpdGVtcxgBIAMo",
            "CzITLnByb3RvLkpkYmNEYXRhSXRlbSJMCgxKZGJjRGF0YUl0ZW0SDgoEdGV4",
            "dBgBIAEoCUgAEhMKCWJ5dGVBcnJheRgCIAEoDEgAEg4KBmlzTnVsbBgDIAEo",
            "CEIHCgV2YWx1ZSrJAgoHTXNnQ29kZRIOCgpMb2FkRHJpdmVyEAASEgoOT3Bl",
            "bkNvbm5lY3Rpb24QARITCg9DbG9zZUNvbm5lY3Rpb24QAhIRCg1DaGFuZ2VD",
            "YXRhbG9nEAMSEQoNU2V0QXV0b0NvbW1pdBAEEhsKF0dldFRyYW5zYWN0aW9u",
            "SXNvbGF0aW9uEAUSGwoXU2V0VHJhbnNhY3Rpb25Jc29sYXRpb24QBhIMCghS",
            "b2xsYmFjaxAHEgoKBkNvbW1pdBAIEhMKD0NyZWF0ZVN0YXRlbWVudBAJEhQK",
            "EEV4ZWN1dGVTdGF0ZW1lbnQQChITCg9DYW5jZWxTdGF0ZW1lbnQQCxISCg5D",
            "bG9zZVN0YXRlbWVudBAMEhAKDFNldFBhcmFtZXRlchANEhEKDVJlYWRSZXN1",
            "bHRTZXQQDhISCg5DbG9zZVJlc3VsdFNldBAPQhOqAhBkbXN0YXIubmV0LlBy",
            "b3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::dmstar.net.Proto.MsgCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.Empty), global::dmstar.net.Proto.Empty.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.ReqWrapper), global::dmstar.net.Proto.ReqWrapper.Parser, new[]{ "Code", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.ResWrapper), global::dmstar.net.Proto.ResWrapper.Parser, new[]{ "Success", "Msg", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.JdbcDataColumn), global::dmstar.net.Proto.JdbcDataColumn.Parser, new[]{ "Ordinal", "TableName", "SchemaName", "CatalogName", "ColumnName", "ColumnLabel", "ColumnDisplaySize", "ColumnPrecision", "ColumnScale", "DataTypeName", "DataTypeClassName", "DataTypeCode", "IsAutoIncrement", "IsCaseSensitive", "IsDefinitelyWritable", "IsSearchable", "IsNullable", "IsAliased", "IsWritable", "IsCurrency", "IsReadOnly", "IsSigned" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.JdbcDataRow), global::dmstar.net.Proto.JdbcDataRow.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.JdbcDataItem), global::dmstar.net.Proto.JdbcDataItem.Parser, new[]{ "Text", "ByteArray", "IsNull" }, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgCode {
    [pbr::OriginalName("LoadDriver")] LoadDriver = 0,
    [pbr::OriginalName("OpenConnection")] OpenConnection = 1,
    [pbr::OriginalName("CloseConnection")] CloseConnection = 2,
    [pbr::OriginalName("ChangeCatalog")] ChangeCatalog = 3,
    [pbr::OriginalName("SetAutoCommit")] SetAutoCommit = 4,
    [pbr::OriginalName("GetTransactionIsolation")] GetTransactionIsolation = 5,
    [pbr::OriginalName("SetTransactionIsolation")] SetTransactionIsolation = 6,
    [pbr::OriginalName("Rollback")] Rollback = 7,
    [pbr::OriginalName("Commit")] Commit = 8,
    [pbr::OriginalName("CreateStatement")] CreateStatement = 9,
    [pbr::OriginalName("ExecuteStatement")] ExecuteStatement = 10,
    [pbr::OriginalName("CancelStatement")] CancelStatement = 11,
    [pbr::OriginalName("CloseStatement")] CloseStatement = 12,
    [pbr::OriginalName("SetParameter")] SetParameter = 13,
    [pbr::OriginalName("ReadResultSet")] ReadResultSet = 14,
    [pbr::OriginalName("CloseResultSet")] CloseResultSet = 15,
  }

  #endregion

  #region Messages
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ReqWrapper : pb::IMessage<ReqWrapper> {
    private static readonly pb::MessageParser<ReqWrapper> _parser = new pb::MessageParser<ReqWrapper>(() => new ReqWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqWrapper(ReqWrapper other) : this() {
      code_ = other.code_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqWrapper Clone() {
      return new ReqWrapper(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::dmstar.net.Proto.MsgCode code_ = global::dmstar.net.Proto.MsgCode.LoadDriver;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::dmstar.net.Proto.MsgCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::dmstar.net.Proto.MsgCode.LoadDriver) hash ^= Code.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != global::dmstar.net.Proto.MsgCode.LoadDriver) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != global::dmstar.net.Proto.MsgCode.LoadDriver) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqWrapper other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::dmstar.net.Proto.MsgCode.LoadDriver) {
        Code = other.Code;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::dmstar.net.Proto.MsgCode) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResWrapper : pb::IMessage<ResWrapper> {
    private static readonly pb::MessageParser<ResWrapper> _parser = new pb::MessageParser<ResWrapper>(() => new ResWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResWrapper(ResWrapper other) : this() {
      success_ = other.success_;
      msg_ = other.msg_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResWrapper Clone() {
      return new ResWrapper(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Msg != other.Msg) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResWrapper other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JdbcDataColumn : pb::IMessage<JdbcDataColumn> {
    private static readonly pb::MessageParser<JdbcDataColumn> _parser = new pb::MessageParser<JdbcDataColumn>(() => new JdbcDataColumn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JdbcDataColumn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataColumn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataColumn(JdbcDataColumn other) : this() {
      ordinal_ = other.ordinal_;
      tableName_ = other.tableName_;
      schemaName_ = other.schemaName_;
      catalogName_ = other.catalogName_;
      columnName_ = other.columnName_;
      columnLabel_ = other.columnLabel_;
      columnDisplaySize_ = other.columnDisplaySize_;
      columnPrecision_ = other.columnPrecision_;
      columnScale_ = other.columnScale_;
      dataTypeName_ = other.dataTypeName_;
      dataTypeClassName_ = other.dataTypeClassName_;
      dataTypeCode_ = other.dataTypeCode_;
      isAutoIncrement_ = other.isAutoIncrement_;
      isCaseSensitive_ = other.isCaseSensitive_;
      isDefinitelyWritable_ = other.isDefinitelyWritable_;
      isSearchable_ = other.isSearchable_;
      isNullable_ = other.isNullable_;
      isAliased_ = other.isAliased_;
      isWritable_ = other.isWritable_;
      isCurrency_ = other.isCurrency_;
      isReadOnly_ = other.isReadOnly_;
      isSigned_ = other.isSigned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataColumn Clone() {
      return new JdbcDataColumn(this);
    }

    /// <summary>Field number for the "ordinal" field.</summary>
    public const int OrdinalFieldNumber = 1;
    private int ordinal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ordinal {
      get { return ordinal_; }
      set {
        ordinal_ = value;
      }
    }

    /// <summary>Field number for the "tableName" field.</summary>
    public const int TableNameFieldNumber = 2;
    private string tableName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schemaName" field.</summary>
    public const int SchemaNameFieldNumber = 3;
    private string schemaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "catalogName" field.</summary>
    public const int CatalogNameFieldNumber = 4;
    private string catalogName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CatalogName {
      get { return catalogName_; }
      set {
        catalogName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columnName" field.</summary>
    public const int ColumnNameFieldNumber = 5;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columnLabel" field.</summary>
    public const int ColumnLabelFieldNumber = 6;
    private string columnLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnLabel {
      get { return columnLabel_; }
      set {
        columnLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columnDisplaySize" field.</summary>
    public const int ColumnDisplaySizeFieldNumber = 7;
    private int columnDisplaySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColumnDisplaySize {
      get { return columnDisplaySize_; }
      set {
        columnDisplaySize_ = value;
      }
    }

    /// <summary>Field number for the "columnPrecision" field.</summary>
    public const int ColumnPrecisionFieldNumber = 8;
    private int columnPrecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColumnPrecision {
      get { return columnPrecision_; }
      set {
        columnPrecision_ = value;
      }
    }

    /// <summary>Field number for the "columnScale" field.</summary>
    public const int ColumnScaleFieldNumber = 9;
    private int columnScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColumnScale {
      get { return columnScale_; }
      set {
        columnScale_ = value;
      }
    }

    /// <summary>Field number for the "dataTypeName" field.</summary>
    public const int DataTypeNameFieldNumber = 10;
    private string dataTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataTypeName {
      get { return dataTypeName_; }
      set {
        dataTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataTypeClassName" field.</summary>
    public const int DataTypeClassNameFieldNumber = 11;
    private string dataTypeClassName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataTypeClassName {
      get { return dataTypeClassName_; }
      set {
        dataTypeClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataTypeCode" field.</summary>
    public const int DataTypeCodeFieldNumber = 12;
    private int dataTypeCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataTypeCode {
      get { return dataTypeCode_; }
      set {
        dataTypeCode_ = value;
      }
    }

    /// <summary>Field number for the "isAutoIncrement" field.</summary>
    public const int IsAutoIncrementFieldNumber = 13;
    private bool isAutoIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoIncrement {
      get { return isAutoIncrement_; }
      set {
        isAutoIncrement_ = value;
      }
    }

    /// <summary>Field number for the "isCaseSensitive" field.</summary>
    public const int IsCaseSensitiveFieldNumber = 14;
    private bool isCaseSensitive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCaseSensitive {
      get { return isCaseSensitive_; }
      set {
        isCaseSensitive_ = value;
      }
    }

    /// <summary>Field number for the "isDefinitelyWritable" field.</summary>
    public const int IsDefinitelyWritableFieldNumber = 15;
    private bool isDefinitelyWritable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDefinitelyWritable {
      get { return isDefinitelyWritable_; }
      set {
        isDefinitelyWritable_ = value;
      }
    }

    /// <summary>Field number for the "isSearchable" field.</summary>
    public const int IsSearchableFieldNumber = 16;
    private bool isSearchable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSearchable {
      get { return isSearchable_; }
      set {
        isSearchable_ = value;
      }
    }

    /// <summary>Field number for the "isNullable" field.</summary>
    public const int IsNullableFieldNumber = 17;
    private int isNullable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsNullable {
      get { return isNullable_; }
      set {
        isNullable_ = value;
      }
    }

    /// <summary>Field number for the "isAliased" field.</summary>
    public const int IsAliasedFieldNumber = 18;
    private bool isAliased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAliased {
      get { return isAliased_; }
      set {
        isAliased_ = value;
      }
    }

    /// <summary>Field number for the "isWritable" field.</summary>
    public const int IsWritableFieldNumber = 19;
    private bool isWritable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWritable {
      get { return isWritable_; }
      set {
        isWritable_ = value;
      }
    }

    /// <summary>Field number for the "isCurrency" field.</summary>
    public const int IsCurrencyFieldNumber = 20;
    private bool isCurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCurrency {
      get { return isCurrency_; }
      set {
        isCurrency_ = value;
      }
    }

    /// <summary>Field number for the "isReadOnly" field.</summary>
    public const int IsReadOnlyFieldNumber = 21;
    private bool isReadOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReadOnly {
      get { return isReadOnly_; }
      set {
        isReadOnly_ = value;
      }
    }

    /// <summary>Field number for the "isSigned" field.</summary>
    public const int IsSignedFieldNumber = 22;
    private bool isSigned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSigned {
      get { return isSigned_; }
      set {
        isSigned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JdbcDataColumn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JdbcDataColumn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ordinal != other.Ordinal) return false;
      if (TableName != other.TableName) return false;
      if (SchemaName != other.SchemaName) return false;
      if (CatalogName != other.CatalogName) return false;
      if (ColumnName != other.ColumnName) return false;
      if (ColumnLabel != other.ColumnLabel) return false;
      if (ColumnDisplaySize != other.ColumnDisplaySize) return false;
      if (ColumnPrecision != other.ColumnPrecision) return false;
      if (ColumnScale != other.ColumnScale) return false;
      if (DataTypeName != other.DataTypeName) return false;
      if (DataTypeClassName != other.DataTypeClassName) return false;
      if (DataTypeCode != other.DataTypeCode) return false;
      if (IsAutoIncrement != other.IsAutoIncrement) return false;
      if (IsCaseSensitive != other.IsCaseSensitive) return false;
      if (IsDefinitelyWritable != other.IsDefinitelyWritable) return false;
      if (IsSearchable != other.IsSearchable) return false;
      if (IsNullable != other.IsNullable) return false;
      if (IsAliased != other.IsAliased) return false;
      if (IsWritable != other.IsWritable) return false;
      if (IsCurrency != other.IsCurrency) return false;
      if (IsReadOnly != other.IsReadOnly) return false;
      if (IsSigned != other.IsSigned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ordinal != 0) hash ^= Ordinal.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (CatalogName.Length != 0) hash ^= CatalogName.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      if (ColumnLabel.Length != 0) hash ^= ColumnLabel.GetHashCode();
      if (ColumnDisplaySize != 0) hash ^= ColumnDisplaySize.GetHashCode();
      if (ColumnPrecision != 0) hash ^= ColumnPrecision.GetHashCode();
      if (ColumnScale != 0) hash ^= ColumnScale.GetHashCode();
      if (DataTypeName.Length != 0) hash ^= DataTypeName.GetHashCode();
      if (DataTypeClassName.Length != 0) hash ^= DataTypeClassName.GetHashCode();
      if (DataTypeCode != 0) hash ^= DataTypeCode.GetHashCode();
      if (IsAutoIncrement != false) hash ^= IsAutoIncrement.GetHashCode();
      if (IsCaseSensitive != false) hash ^= IsCaseSensitive.GetHashCode();
      if (IsDefinitelyWritable != false) hash ^= IsDefinitelyWritable.GetHashCode();
      if (IsSearchable != false) hash ^= IsSearchable.GetHashCode();
      if (IsNullable != 0) hash ^= IsNullable.GetHashCode();
      if (IsAliased != false) hash ^= IsAliased.GetHashCode();
      if (IsWritable != false) hash ^= IsWritable.GetHashCode();
      if (IsCurrency != false) hash ^= IsCurrency.GetHashCode();
      if (IsReadOnly != false) hash ^= IsReadOnly.GetHashCode();
      if (IsSigned != false) hash ^= IsSigned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ordinal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ordinal);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableName);
      }
      if (SchemaName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SchemaName);
      }
      if (CatalogName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CatalogName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ColumnName);
      }
      if (ColumnLabel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ColumnLabel);
      }
      if (ColumnDisplaySize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ColumnDisplaySize);
      }
      if (ColumnPrecision != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ColumnPrecision);
      }
      if (ColumnScale != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ColumnScale);
      }
      if (DataTypeName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DataTypeName);
      }
      if (DataTypeClassName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DataTypeClassName);
      }
      if (DataTypeCode != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DataTypeCode);
      }
      if (IsAutoIncrement != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsAutoIncrement);
      }
      if (IsCaseSensitive != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsCaseSensitive);
      }
      if (IsDefinitelyWritable != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsDefinitelyWritable);
      }
      if (IsSearchable != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsSearchable);
      }
      if (IsNullable != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(IsNullable);
      }
      if (IsAliased != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAliased);
      }
      if (IsWritable != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsWritable);
      }
      if (IsCurrency != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsCurrency);
      }
      if (IsReadOnly != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsReadOnly);
      }
      if (IsSigned != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsSigned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ordinal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ordinal);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (CatalogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CatalogName);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (ColumnLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnLabel);
      }
      if (ColumnDisplaySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnDisplaySize);
      }
      if (ColumnPrecision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnPrecision);
      }
      if (ColumnScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnScale);
      }
      if (DataTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataTypeName);
      }
      if (DataTypeClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataTypeClassName);
      }
      if (DataTypeCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataTypeCode);
      }
      if (IsAutoIncrement != false) {
        size += 1 + 1;
      }
      if (IsCaseSensitive != false) {
        size += 1 + 1;
      }
      if (IsDefinitelyWritable != false) {
        size += 1 + 1;
      }
      if (IsSearchable != false) {
        size += 2 + 1;
      }
      if (IsNullable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsNullable);
      }
      if (IsAliased != false) {
        size += 2 + 1;
      }
      if (IsWritable != false) {
        size += 2 + 1;
      }
      if (IsCurrency != false) {
        size += 2 + 1;
      }
      if (IsReadOnly != false) {
        size += 2 + 1;
      }
      if (IsSigned != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JdbcDataColumn other) {
      if (other == null) {
        return;
      }
      if (other.Ordinal != 0) {
        Ordinal = other.Ordinal;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      if (other.CatalogName.Length != 0) {
        CatalogName = other.CatalogName;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      if (other.ColumnLabel.Length != 0) {
        ColumnLabel = other.ColumnLabel;
      }
      if (other.ColumnDisplaySize != 0) {
        ColumnDisplaySize = other.ColumnDisplaySize;
      }
      if (other.ColumnPrecision != 0) {
        ColumnPrecision = other.ColumnPrecision;
      }
      if (other.ColumnScale != 0) {
        ColumnScale = other.ColumnScale;
      }
      if (other.DataTypeName.Length != 0) {
        DataTypeName = other.DataTypeName;
      }
      if (other.DataTypeClassName.Length != 0) {
        DataTypeClassName = other.DataTypeClassName;
      }
      if (other.DataTypeCode != 0) {
        DataTypeCode = other.DataTypeCode;
      }
      if (other.IsAutoIncrement != false) {
        IsAutoIncrement = other.IsAutoIncrement;
      }
      if (other.IsCaseSensitive != false) {
        IsCaseSensitive = other.IsCaseSensitive;
      }
      if (other.IsDefinitelyWritable != false) {
        IsDefinitelyWritable = other.IsDefinitelyWritable;
      }
      if (other.IsSearchable != false) {
        IsSearchable = other.IsSearchable;
      }
      if (other.IsNullable != 0) {
        IsNullable = other.IsNullable;
      }
      if (other.IsAliased != false) {
        IsAliased = other.IsAliased;
      }
      if (other.IsWritable != false) {
        IsWritable = other.IsWritable;
      }
      if (other.IsCurrency != false) {
        IsCurrency = other.IsCurrency;
      }
      if (other.IsReadOnly != false) {
        IsReadOnly = other.IsReadOnly;
      }
      if (other.IsSigned != false) {
        IsSigned = other.IsSigned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ordinal = input.ReadInt32();
            break;
          }
          case 18: {
            TableName = input.ReadString();
            break;
          }
          case 26: {
            SchemaName = input.ReadString();
            break;
          }
          case 34: {
            CatalogName = input.ReadString();
            break;
          }
          case 42: {
            ColumnName = input.ReadString();
            break;
          }
          case 50: {
            ColumnLabel = input.ReadString();
            break;
          }
          case 56: {
            ColumnDisplaySize = input.ReadInt32();
            break;
          }
          case 64: {
            ColumnPrecision = input.ReadInt32();
            break;
          }
          case 72: {
            ColumnScale = input.ReadInt32();
            break;
          }
          case 82: {
            DataTypeName = input.ReadString();
            break;
          }
          case 90: {
            DataTypeClassName = input.ReadString();
            break;
          }
          case 96: {
            DataTypeCode = input.ReadInt32();
            break;
          }
          case 104: {
            IsAutoIncrement = input.ReadBool();
            break;
          }
          case 112: {
            IsCaseSensitive = input.ReadBool();
            break;
          }
          case 120: {
            IsDefinitelyWritable = input.ReadBool();
            break;
          }
          case 128: {
            IsSearchable = input.ReadBool();
            break;
          }
          case 136: {
            IsNullable = input.ReadInt32();
            break;
          }
          case 144: {
            IsAliased = input.ReadBool();
            break;
          }
          case 152: {
            IsWritable = input.ReadBool();
            break;
          }
          case 160: {
            IsCurrency = input.ReadBool();
            break;
          }
          case 168: {
            IsReadOnly = input.ReadBool();
            break;
          }
          case 176: {
            IsSigned = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JdbcDataRow : pb::IMessage<JdbcDataRow> {
    private static readonly pb::MessageParser<JdbcDataRow> _parser = new pb::MessageParser<JdbcDataRow>(() => new JdbcDataRow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JdbcDataRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataRow(JdbcDataRow other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataRow Clone() {
      return new JdbcDataRow(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::dmstar.net.Proto.JdbcDataItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::dmstar.net.Proto.JdbcDataItem.Parser);
    private readonly pbc::RepeatedField<global::dmstar.net.Proto.JdbcDataItem> items_ = new pbc::RepeatedField<global::dmstar.net.Proto.JdbcDataItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::dmstar.net.Proto.JdbcDataItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JdbcDataRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JdbcDataRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JdbcDataRow other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JdbcDataItem : pb::IMessage<JdbcDataItem> {
    private static readonly pb::MessageParser<JdbcDataItem> _parser = new pb::MessageParser<JdbcDataItem>(() => new JdbcDataItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JdbcDataItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataItem(JdbcDataItem other) : this() {
      isNull_ = other.isNull_;
      switch (other.ValueCase) {
        case ValueOneofCase.Text:
          Text = other.Text;
          break;
        case ValueOneofCase.ByteArray:
          ByteArray = other.ByteArray;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JdbcDataItem Clone() {
      return new JdbcDataItem(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return valueCase_ == ValueOneofCase.Text ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.Text;
      }
    }

    /// <summary>Field number for the "byteArray" field.</summary>
    public const int ByteArrayFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ByteArray {
      get { return valueCase_ == ValueOneofCase.ByteArray ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.ByteArray;
      }
    }

    /// <summary>Field number for the "isNull" field.</summary>
    public const int IsNullFieldNumber = 3;
    private bool isNull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNull {
      get { return isNull_; }
      set {
        isNull_ = value;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Text = 1,
      ByteArray = 2,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JdbcDataItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JdbcDataItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (ByteArray != other.ByteArray) return false;
      if (IsNull != other.IsNull) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Text) hash ^= Text.GetHashCode();
      if (valueCase_ == ValueOneofCase.ByteArray) hash ^= ByteArray.GetHashCode();
      if (IsNull != false) hash ^= IsNull.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Text) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (valueCase_ == ValueOneofCase.ByteArray) {
        output.WriteRawTag(18);
        output.WriteBytes(ByteArray);
      }
      if (IsNull != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNull);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (valueCase_ == ValueOneofCase.ByteArray) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ByteArray);
      }
      if (IsNull != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JdbcDataItem other) {
      if (other == null) {
        return;
      }
      if (other.IsNull != false) {
        IsNull = other.IsNull;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Text:
          Text = other.Text;
          break;
        case ValueOneofCase.ByteArray:
          ByteArray = other.ByteArray;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 18: {
            ByteArray = input.ReadBytes();
            break;
          }
          case 24: {
            IsNull = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
