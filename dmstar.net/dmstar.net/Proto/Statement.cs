// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: statement.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace dmstar.net.Proto {

  /// <summary>Holder for reflection information generated from statement.proto</summary>
  public static partial class StatementReflection {

    #region Descriptor
    /// <summary>File descriptor for statement.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9zdGF0ZW1lbnQucHJvdG8SD3Byb3RvLnN0YXRlbWVudBoMY29tbW9uLnBy",
            "b3RvIjsKFkNyZWF0ZVN0YXRlbWVudFJlcXVlc3QSFAoMY29ubmVjdGlvbklk",
            "GAEgASgJEgsKA3NxbBgCIAEoCSIuChdDcmVhdGVTdGF0ZW1lbnRSZXNwb25z",
            "ZRITCgtzdGF0ZW1lbnRJZBgBIAEoCSJBChdFeGVjdXRlU3RhdGVtZW50UmVx",
            "dWVzdBITCgtzdGF0ZW1lbnRJZBgBIAEoCRIRCglmZXRjaFNpemUYAiABKAUi",
            "gQEKGEV4ZWN1dGVTdGF0ZW1lbnRSZXNwb25zZRITCgtyZXN1bHRTZXRJZBgB",
            "IAEoCRIXCg9yZWNvcmRzQWZmZWN0ZWQYAiABKAUSDwoHaGFzUm93cxgEIAEo",
            "CBImCgdjb2x1bW5zGAUgAygLMhUucHJvdG8uSmRiY0RhdGFDb2x1bW4iLQoW",
            "Q2FuY2VsU3RhdGVtZW50UmVxdWVzdBITCgtzdGF0ZW1lbnRJZBgBIAEoCSIs",
            "ChVDbG9zZVN0YXRlbWVudFJlcXVlc3QSEwoLc3RhdGVtZW50SWQYASABKAki",
            "dgoTU2V0UGFyYW1ldGVyUmVxdWVzdBITCgtzdGF0ZW1lbnRJZBgBIAEoCRIN",
            "CgVpbmRleBgDIAEoBRINCgV2YWx1ZRgEIAEoCRIsCgR0eXBlGAUgASgOMh4u",
            "cHJvdG8uc3RhdGVtZW50LlBhcmFtZXRlclR5cGUqcQoNUGFyYW1ldGVyVHlw",
            "ZRIHCgNJTlQQABIICgRMT05HEAESCQoFU0hPUlQQAhIJCgVGTE9BVBADEgoK",
            "BkRPVUJMRRAEEgoKBlNUUklORxAFEgsKB0JPT0xFQU4QBhIICgRUSU1FEAcS",
            "CAoEREFURRAIQhOqAhBkbXN0YXIubmV0LlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::dmstar.net.Proto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::dmstar.net.Proto.ParameterType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.CreateStatementRequest), global::dmstar.net.Proto.CreateStatementRequest.Parser, new[]{ "ConnectionId", "Sql" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.CreateStatementResponse), global::dmstar.net.Proto.CreateStatementResponse.Parser, new[]{ "StatementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.ExecuteStatementRequest), global::dmstar.net.Proto.ExecuteStatementRequest.Parser, new[]{ "StatementId", "FetchSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.ExecuteStatementResponse), global::dmstar.net.Proto.ExecuteStatementResponse.Parser, new[]{ "ResultSetId", "RecordsAffected", "HasRows", "Columns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.CancelStatementRequest), global::dmstar.net.Proto.CancelStatementRequest.Parser, new[]{ "StatementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.CloseStatementRequest), global::dmstar.net.Proto.CloseStatementRequest.Parser, new[]{ "StatementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.SetParameterRequest), global::dmstar.net.Proto.SetParameterRequest.Parser, new[]{ "StatementId", "Index", "Value", "Type" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ParameterType {
    [pbr::OriginalName("INT")] Int = 0,
    [pbr::OriginalName("LONG")] Long = 1,
    [pbr::OriginalName("SHORT")] Short = 2,
    [pbr::OriginalName("FLOAT")] Float = 3,
    [pbr::OriginalName("DOUBLE")] Double = 4,
    [pbr::OriginalName("STRING")] String = 5,
    [pbr::OriginalName("BOOLEAN")] Boolean = 6,
    [pbr::OriginalName("TIME")] Time = 7,
    [pbr::OriginalName("DATE")] Date = 8,
  }

  #endregion

  #region Messages
  public sealed partial class CreateStatementRequest : pb::IMessage<CreateStatementRequest> {
    private static readonly pb::MessageParser<CreateStatementRequest> _parser = new pb::MessageParser<CreateStatementRequest>(() => new CreateStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.StatementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStatementRequest(CreateStatementRequest other) : this() {
      connectionId_ = other.connectionId_;
      sql_ = other.sql_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStatementRequest Clone() {
      return new CreateStatementRequest(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 2;
    private string sql_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (Sql != other.Sql) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (Sql.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sql);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 18: {
            Sql = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateStatementResponse : pb::IMessage<CreateStatementResponse> {
    private static readonly pb::MessageParser<CreateStatementResponse> _parser = new pb::MessageParser<CreateStatementResponse>(() => new CreateStatementResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateStatementResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.StatementReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStatementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStatementResponse(CreateStatementResponse other) : this() {
      statementId_ = other.statementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStatementResponse Clone() {
      return new CreateStatementResponse(this);
    }

    /// <summary>Field number for the "statementId" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private string statementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatementId {
      get { return statementId_; }
      set {
        statementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateStatementResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateStatementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId.Length != 0) hash ^= StatementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateStatementResponse other) {
      if (other == null) {
        return;
      }
      if (other.StatementId.Length != 0) {
        StatementId = other.StatementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatementId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecuteStatementRequest : pb::IMessage<ExecuteStatementRequest> {
    private static readonly pb::MessageParser<ExecuteStatementRequest> _parser = new pb::MessageParser<ExecuteStatementRequest>(() => new ExecuteStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.StatementReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteStatementRequest(ExecuteStatementRequest other) : this() {
      statementId_ = other.statementId_;
      fetchSize_ = other.fetchSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteStatementRequest Clone() {
      return new ExecuteStatementRequest(this);
    }

    /// <summary>Field number for the "statementId" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private string statementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatementId {
      get { return statementId_; }
      set {
        statementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fetchSize" field.</summary>
    public const int FetchSizeFieldNumber = 2;
    private int fetchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FetchSize {
      get { return fetchSize_; }
      set {
        fetchSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      if (FetchSize != other.FetchSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId.Length != 0) hash ^= StatementId.GetHashCode();
      if (FetchSize != 0) hash ^= FetchSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatementId);
      }
      if (FetchSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FetchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatementId);
      }
      if (FetchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FetchSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId.Length != 0) {
        StatementId = other.StatementId;
      }
      if (other.FetchSize != 0) {
        FetchSize = other.FetchSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatementId = input.ReadString();
            break;
          }
          case 16: {
            FetchSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecuteStatementResponse : pb::IMessage<ExecuteStatementResponse> {
    private static readonly pb::MessageParser<ExecuteStatementResponse> _parser = new pb::MessageParser<ExecuteStatementResponse>(() => new ExecuteStatementResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteStatementResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.StatementReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteStatementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteStatementResponse(ExecuteStatementResponse other) : this() {
      resultSetId_ = other.resultSetId_;
      recordsAffected_ = other.recordsAffected_;
      hasRows_ = other.hasRows_;
      columns_ = other.columns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteStatementResponse Clone() {
      return new ExecuteStatementResponse(this);
    }

    /// <summary>Field number for the "resultSetId" field.</summary>
    public const int ResultSetIdFieldNumber = 1;
    private string resultSetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResultSetId {
      get { return resultSetId_; }
      set {
        resultSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordsAffected" field.</summary>
    public const int RecordsAffectedFieldNumber = 2;
    private int recordsAffected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordsAffected {
      get { return recordsAffected_; }
      set {
        recordsAffected_ = value;
      }
    }

    /// <summary>Field number for the "hasRows" field.</summary>
    public const int HasRowsFieldNumber = 4;
    private bool hasRows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRows {
      get { return hasRows_; }
      set {
        hasRows_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::dmstar.net.Proto.JdbcDataColumn> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(42, global::dmstar.net.Proto.JdbcDataColumn.Parser);
    private readonly pbc::RepeatedField<global::dmstar.net.Proto.JdbcDataColumn> columns_ = new pbc::RepeatedField<global::dmstar.net.Proto.JdbcDataColumn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::dmstar.net.Proto.JdbcDataColumn> Columns {
      get { return columns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteStatementResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteStatementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultSetId != other.ResultSetId) return false;
      if (RecordsAffected != other.RecordsAffected) return false;
      if (HasRows != other.HasRows) return false;
      if(!columns_.Equals(other.columns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultSetId.Length != 0) hash ^= ResultSetId.GetHashCode();
      if (RecordsAffected != 0) hash ^= RecordsAffected.GetHashCode();
      if (HasRows != false) hash ^= HasRows.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResultSetId);
      }
      if (RecordsAffected != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecordsAffected);
      }
      if (HasRows != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasRows);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResultSetId);
      }
      if (RecordsAffected != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordsAffected);
      }
      if (HasRows != false) {
        size += 1 + 1;
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteStatementResponse other) {
      if (other == null) {
        return;
      }
      if (other.ResultSetId.Length != 0) {
        ResultSetId = other.ResultSetId;
      }
      if (other.RecordsAffected != 0) {
        RecordsAffected = other.RecordsAffected;
      }
      if (other.HasRows != false) {
        HasRows = other.HasRows;
      }
      columns_.Add(other.columns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResultSetId = input.ReadString();
            break;
          }
          case 16: {
            RecordsAffected = input.ReadInt32();
            break;
          }
          case 32: {
            HasRows = input.ReadBool();
            break;
          }
          case 42: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelStatementRequest : pb::IMessage<CancelStatementRequest> {
    private static readonly pb::MessageParser<CancelStatementRequest> _parser = new pb::MessageParser<CancelStatementRequest>(() => new CancelStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.StatementReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelStatementRequest(CancelStatementRequest other) : this() {
      statementId_ = other.statementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelStatementRequest Clone() {
      return new CancelStatementRequest(this);
    }

    /// <summary>Field number for the "statementId" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private string statementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatementId {
      get { return statementId_; }
      set {
        statementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId.Length != 0) hash ^= StatementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId.Length != 0) {
        StatementId = other.StatementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatementId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseStatementRequest : pb::IMessage<CloseStatementRequest> {
    private static readonly pb::MessageParser<CloseStatementRequest> _parser = new pb::MessageParser<CloseStatementRequest>(() => new CloseStatementRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseStatementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.StatementReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatementRequest(CloseStatementRequest other) : this() {
      statementId_ = other.statementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatementRequest Clone() {
      return new CloseStatementRequest(this);
    }

    /// <summary>Field number for the "statementId" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private string statementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatementId {
      get { return statementId_; }
      set {
        statementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseStatementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseStatementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId.Length != 0) hash ^= StatementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseStatementRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId.Length != 0) {
        StatementId = other.StatementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatementId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetParameterRequest : pb::IMessage<SetParameterRequest> {
    private static readonly pb::MessageParser<SetParameterRequest> _parser = new pb::MessageParser<SetParameterRequest>(() => new SetParameterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetParameterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.StatementReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterRequest(SetParameterRequest other) : this() {
      statementId_ = other.statementId_;
      index_ = other.index_;
      value_ = other.value_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetParameterRequest Clone() {
      return new SetParameterRequest(this);
    }

    /// <summary>Field number for the "statementId" field.</summary>
    public const int StatementIdFieldNumber = 1;
    private string statementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatementId {
      get { return statementId_; }
      set {
        statementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::dmstar.net.Proto.ParameterType type_ = global::dmstar.net.Proto.ParameterType.Int;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::dmstar.net.Proto.ParameterType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetParameterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetParameterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatementId != other.StatementId) return false;
      if (Index != other.Index) return false;
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatementId.Length != 0) hash ^= StatementId.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Type != global::dmstar.net.Proto.ParameterType.Int) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatementId);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
      if (Type != global::dmstar.net.Proto.ParameterType.Int) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatementId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Type != global::dmstar.net.Proto.ParameterType.Int) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetParameterRequest other) {
      if (other == null) {
        return;
      }
      if (other.StatementId.Length != 0) {
        StatementId = other.StatementId;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Type != global::dmstar.net.Proto.ParameterType.Int) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatementId = input.ReadString();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
          case 40: {
            Type = (global::dmstar.net.Proto.ParameterType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
