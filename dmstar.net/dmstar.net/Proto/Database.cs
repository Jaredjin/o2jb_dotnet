// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: database.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace dmstar.net.Proto {

  /// <summary>Holder for reflection information generated from database.proto</summary>
  public static partial class DatabaseReflection {

    #region Descriptor
    /// <summary>File descriptor for database.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatabaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5kYXRhYmFzZS5wcm90bxIOcHJvdG8uZGF0YWJhc2UiIQoDTWFwEgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCSJRChVPcGVuQ29ubmVjdGlvblJlcXVl",
            "c3QSDwoHamRiY1VybBgBIAEoCRInCgpwcm9wZXJ0aWVzGAIgAygLMhMucHJv",
            "dG8uZGF0YWJhc2UuTWFwIrgBChZPcGVuQ29ubmVjdGlvblJlc3BvbnNlEhQK",
            "DGNvbm5lY3Rpb25JZBgBIAEoCRIPCgdjYXRhbG9nGAIgASgJEhsKE2RhdGFi",
            "YXNlUHJvZHVjdE5hbWUYAyABKAkSHgoWZGF0YWJhc2VQcm9kdWN0VmVyc2lv",
            "bhgEIAEoCRIcChRkYXRhYmFzZU1ham9yVmVyc2lvbhgFIAEoBRIcChRkYXRh",
            "YmFzZU1pbm9yVmVyc2lvbhgGIAEoBSIuChZDbG9zZUNvbm5lY3Rpb25SZXF1",
            "ZXN0EhQKDGNvbm5lY3Rpb25JZBgBIAEoCSJBChRDaGFuZ2VDYXRhbG9nUmVx",
            "dWVzdBIUCgxjb25uZWN0aW9uSWQYASABKAkSEwoLY2F0YWxvZ05hbWUYAiAB",
            "KAkiNgoeR2V0VHJhbnNhY3Rpb25Jc29sYXRpb25SZXF1ZXN0EhQKDGNvbm5l",
            "Y3Rpb25JZBgBIAEoCSJaCh9HZXRUcmFuc2FjdGlvbklzb2xhdGlvblJlc3Bv",
            "bnNlEjcKCWlzb2xhdGlvbhgBIAEoDjIkLnByb3RvLmRhdGFiYXNlLlRyYW5z",
            "YWN0aW9uSXNvbGF0aW9uIm8KHlNldFRyYW5zYWN0aW9uSXNvbGF0aW9uUmVx",
            "dWVzdBIUCgxjb25uZWN0aW9uSWQYASABKAkSNwoJaXNvbGF0aW9uGAIgASgO",
            "MiQucHJvdG8uZGF0YWJhc2UuVHJhbnNhY3Rpb25Jc29sYXRpb24iQwoUU2V0",
            "QXV0b0NvbW1pdFJlcXVlc3QSFAoMY29ubmVjdGlvbklkGAEgASgJEhUKDXVz",
            "ZUF1dG9Db21taXQYAiABKAgiKgoSVHJhbnNhY3Rpb25SZXF1ZXN0EhQKDGNv",
            "bm5lY3Rpb25JZBgBIAEoCSpxChRUcmFuc2FjdGlvbklzb2xhdGlvbhIICgRO",
            "T05FEAASEgoOUkVBRF9DT01NSVRURUQQAhIUChBSRUFEX1VOQ09NTUlUVEVE",
            "EAESEwoPUkVQRUFUQUJMRV9SRUFEEAQSEAoMU0VSSUFMSVpBQkxFEAhCE6oC",
            "EGRtc3Rhci5uZXQuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::dmstar.net.Proto.TransactionIsolation), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.Map), global::dmstar.net.Proto.Map.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.OpenConnectionRequest), global::dmstar.net.Proto.OpenConnectionRequest.Parser, new[]{ "JdbcUrl", "Properties" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.OpenConnectionResponse), global::dmstar.net.Proto.OpenConnectionResponse.Parser, new[]{ "ConnectionId", "Catalog", "DatabaseProductName", "DatabaseProductVersion", "DatabaseMajorVersion", "DatabaseMinorVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.CloseConnectionRequest), global::dmstar.net.Proto.CloseConnectionRequest.Parser, new[]{ "ConnectionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.ChangeCatalogRequest), global::dmstar.net.Proto.ChangeCatalogRequest.Parser, new[]{ "ConnectionId", "CatalogName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.GetTransactionIsolationRequest), global::dmstar.net.Proto.GetTransactionIsolationRequest.Parser, new[]{ "ConnectionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.GetTransactionIsolationResponse), global::dmstar.net.Proto.GetTransactionIsolationResponse.Parser, new[]{ "Isolation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.SetTransactionIsolationRequest), global::dmstar.net.Proto.SetTransactionIsolationRequest.Parser, new[]{ "ConnectionId", "Isolation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.SetAutoCommitRequest), global::dmstar.net.Proto.SetAutoCommitRequest.Parser, new[]{ "ConnectionId", "UseAutoCommit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dmstar.net.Proto.TransactionRequest), global::dmstar.net.Proto.TransactionRequest.Parser, new[]{ "ConnectionId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TransactionIsolation {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("READ_COMMITTED")] ReadCommitted = 2,
    [pbr::OriginalName("READ_UNCOMMITTED")] ReadUncommitted = 1,
    [pbr::OriginalName("REPEATABLE_READ")] RepeatableRead = 4,
    [pbr::OriginalName("SERIALIZABLE")] Serializable = 8,
  }

  #endregion

  #region Messages
  public sealed partial class Map : pb::IMessage<Map> {
    private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map(Map other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map Clone() {
      return new Map(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenConnectionRequest : pb::IMessage<OpenConnectionRequest> {
    private static readonly pb::MessageParser<OpenConnectionRequest> _parser = new pb::MessageParser<OpenConnectionRequest>(() => new OpenConnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenConnectionRequest(OpenConnectionRequest other) : this() {
      jdbcUrl_ = other.jdbcUrl_;
      properties_ = other.properties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenConnectionRequest Clone() {
      return new OpenConnectionRequest(this);
    }

    /// <summary>Field number for the "jdbcUrl" field.</summary>
    public const int JdbcUrlFieldNumber = 1;
    private string jdbcUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JdbcUrl {
      get { return jdbcUrl_; }
      set {
        jdbcUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::dmstar.net.Proto.Map> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(18, global::dmstar.net.Proto.Map.Parser);
    private readonly pbc::RepeatedField<global::dmstar.net.Proto.Map> properties_ = new pbc::RepeatedField<global::dmstar.net.Proto.Map>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::dmstar.net.Proto.Map> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JdbcUrl != other.JdbcUrl) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JdbcUrl.Length != 0) hash ^= JdbcUrl.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JdbcUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JdbcUrl);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JdbcUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JdbcUrl);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.JdbcUrl.Length != 0) {
        JdbcUrl = other.JdbcUrl;
      }
      properties_.Add(other.properties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            JdbcUrl = input.ReadString();
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenConnectionResponse : pb::IMessage<OpenConnectionResponse> {
    private static readonly pb::MessageParser<OpenConnectionResponse> _parser = new pb::MessageParser<OpenConnectionResponse>(() => new OpenConnectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenConnectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenConnectionResponse(OpenConnectionResponse other) : this() {
      connectionId_ = other.connectionId_;
      catalog_ = other.catalog_;
      databaseProductName_ = other.databaseProductName_;
      databaseProductVersion_ = other.databaseProductVersion_;
      databaseMajorVersion_ = other.databaseMajorVersion_;
      databaseMinorVersion_ = other.databaseMinorVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenConnectionResponse Clone() {
      return new OpenConnectionResponse(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "catalog" field.</summary>
    public const int CatalogFieldNumber = 2;
    private string catalog_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catalog {
      get { return catalog_; }
      set {
        catalog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "databaseProductName" field.</summary>
    public const int DatabaseProductNameFieldNumber = 3;
    private string databaseProductName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseProductName {
      get { return databaseProductName_; }
      set {
        databaseProductName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "databaseProductVersion" field.</summary>
    public const int DatabaseProductVersionFieldNumber = 4;
    private string databaseProductVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseProductVersion {
      get { return databaseProductVersion_; }
      set {
        databaseProductVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "databaseMajorVersion" field.</summary>
    public const int DatabaseMajorVersionFieldNumber = 5;
    private int databaseMajorVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DatabaseMajorVersion {
      get { return databaseMajorVersion_; }
      set {
        databaseMajorVersion_ = value;
      }
    }

    /// <summary>Field number for the "databaseMinorVersion" field.</summary>
    public const int DatabaseMinorVersionFieldNumber = 6;
    private int databaseMinorVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DatabaseMinorVersion {
      get { return databaseMinorVersion_; }
      set {
        databaseMinorVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenConnectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (Catalog != other.Catalog) return false;
      if (DatabaseProductName != other.DatabaseProductName) return false;
      if (DatabaseProductVersion != other.DatabaseProductVersion) return false;
      if (DatabaseMajorVersion != other.DatabaseMajorVersion) return false;
      if (DatabaseMinorVersion != other.DatabaseMinorVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (Catalog.Length != 0) hash ^= Catalog.GetHashCode();
      if (DatabaseProductName.Length != 0) hash ^= DatabaseProductName.GetHashCode();
      if (DatabaseProductVersion.Length != 0) hash ^= DatabaseProductVersion.GetHashCode();
      if (DatabaseMajorVersion != 0) hash ^= DatabaseMajorVersion.GetHashCode();
      if (DatabaseMinorVersion != 0) hash ^= DatabaseMinorVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (Catalog.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Catalog);
      }
      if (DatabaseProductName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DatabaseProductName);
      }
      if (DatabaseProductVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DatabaseProductVersion);
      }
      if (DatabaseMajorVersion != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DatabaseMajorVersion);
      }
      if (DatabaseMinorVersion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DatabaseMinorVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (Catalog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catalog);
      }
      if (DatabaseProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseProductName);
      }
      if (DatabaseProductVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseProductVersion);
      }
      if (DatabaseMajorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DatabaseMajorVersion);
      }
      if (DatabaseMinorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DatabaseMinorVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.Catalog.Length != 0) {
        Catalog = other.Catalog;
      }
      if (other.DatabaseProductName.Length != 0) {
        DatabaseProductName = other.DatabaseProductName;
      }
      if (other.DatabaseProductVersion.Length != 0) {
        DatabaseProductVersion = other.DatabaseProductVersion;
      }
      if (other.DatabaseMajorVersion != 0) {
        DatabaseMajorVersion = other.DatabaseMajorVersion;
      }
      if (other.DatabaseMinorVersion != 0) {
        DatabaseMinorVersion = other.DatabaseMinorVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 18: {
            Catalog = input.ReadString();
            break;
          }
          case 26: {
            DatabaseProductName = input.ReadString();
            break;
          }
          case 34: {
            DatabaseProductVersion = input.ReadString();
            break;
          }
          case 40: {
            DatabaseMajorVersion = input.ReadInt32();
            break;
          }
          case 48: {
            DatabaseMinorVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseConnectionRequest : pb::IMessage<CloseConnectionRequest> {
    private static readonly pb::MessageParser<CloseConnectionRequest> _parser = new pb::MessageParser<CloseConnectionRequest>(() => new CloseConnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseConnectionRequest(CloseConnectionRequest other) : this() {
      connectionId_ = other.connectionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseConnectionRequest Clone() {
      return new CloseConnectionRequest(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeCatalogRequest : pb::IMessage<ChangeCatalogRequest> {
    private static readonly pb::MessageParser<ChangeCatalogRequest> _parser = new pb::MessageParser<ChangeCatalogRequest>(() => new ChangeCatalogRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCatalogRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCatalogRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCatalogRequest(ChangeCatalogRequest other) : this() {
      connectionId_ = other.connectionId_;
      catalogName_ = other.catalogName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCatalogRequest Clone() {
      return new ChangeCatalogRequest(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "catalogName" field.</summary>
    public const int CatalogNameFieldNumber = 2;
    private string catalogName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CatalogName {
      get { return catalogName_; }
      set {
        catalogName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCatalogRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCatalogRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (CatalogName != other.CatalogName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (CatalogName.Length != 0) hash ^= CatalogName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (CatalogName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CatalogName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (CatalogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CatalogName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCatalogRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.CatalogName.Length != 0) {
        CatalogName = other.CatalogName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 18: {
            CatalogName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionIsolationRequest : pb::IMessage<GetTransactionIsolationRequest> {
    private static readonly pb::MessageParser<GetTransactionIsolationRequest> _parser = new pb::MessageParser<GetTransactionIsolationRequest>(() => new GetTransactionIsolationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionIsolationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionIsolationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionIsolationRequest(GetTransactionIsolationRequest other) : this() {
      connectionId_ = other.connectionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionIsolationRequest Clone() {
      return new GetTransactionIsolationRequest(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionIsolationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionIsolationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionIsolationRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionIsolationResponse : pb::IMessage<GetTransactionIsolationResponse> {
    private static readonly pb::MessageParser<GetTransactionIsolationResponse> _parser = new pb::MessageParser<GetTransactionIsolationResponse>(() => new GetTransactionIsolationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionIsolationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionIsolationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionIsolationResponse(GetTransactionIsolationResponse other) : this() {
      isolation_ = other.isolation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionIsolationResponse Clone() {
      return new GetTransactionIsolationResponse(this);
    }

    /// <summary>Field number for the "isolation" field.</summary>
    public const int IsolationFieldNumber = 1;
    private global::dmstar.net.Proto.TransactionIsolation isolation_ = global::dmstar.net.Proto.TransactionIsolation.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::dmstar.net.Proto.TransactionIsolation Isolation {
      get { return isolation_; }
      set {
        isolation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionIsolationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionIsolationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Isolation != other.Isolation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Isolation != global::dmstar.net.Proto.TransactionIsolation.None) hash ^= Isolation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Isolation != global::dmstar.net.Proto.TransactionIsolation.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Isolation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Isolation != global::dmstar.net.Proto.TransactionIsolation.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Isolation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionIsolationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Isolation != global::dmstar.net.Proto.TransactionIsolation.None) {
        Isolation = other.Isolation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Isolation = (global::dmstar.net.Proto.TransactionIsolation) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTransactionIsolationRequest : pb::IMessage<SetTransactionIsolationRequest> {
    private static readonly pb::MessageParser<SetTransactionIsolationRequest> _parser = new pb::MessageParser<SetTransactionIsolationRequest>(() => new SetTransactionIsolationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTransactionIsolationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionIsolationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionIsolationRequest(SetTransactionIsolationRequest other) : this() {
      connectionId_ = other.connectionId_;
      isolation_ = other.isolation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionIsolationRequest Clone() {
      return new SetTransactionIsolationRequest(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isolation" field.</summary>
    public const int IsolationFieldNumber = 2;
    private global::dmstar.net.Proto.TransactionIsolation isolation_ = global::dmstar.net.Proto.TransactionIsolation.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::dmstar.net.Proto.TransactionIsolation Isolation {
      get { return isolation_; }
      set {
        isolation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTransactionIsolationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTransactionIsolationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (Isolation != other.Isolation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (Isolation != global::dmstar.net.Proto.TransactionIsolation.None) hash ^= Isolation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (Isolation != global::dmstar.net.Proto.TransactionIsolation.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Isolation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (Isolation != global::dmstar.net.Proto.TransactionIsolation.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Isolation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTransactionIsolationRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.Isolation != global::dmstar.net.Proto.TransactionIsolation.None) {
        Isolation = other.Isolation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            Isolation = (global::dmstar.net.Proto.TransactionIsolation) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetAutoCommitRequest : pb::IMessage<SetAutoCommitRequest> {
    private static readonly pb::MessageParser<SetAutoCommitRequest> _parser = new pb::MessageParser<SetAutoCommitRequest>(() => new SetAutoCommitRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAutoCommitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAutoCommitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAutoCommitRequest(SetAutoCommitRequest other) : this() {
      connectionId_ = other.connectionId_;
      useAutoCommit_ = other.useAutoCommit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAutoCommitRequest Clone() {
      return new SetAutoCommitRequest(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "useAutoCommit" field.</summary>
    public const int UseAutoCommitFieldNumber = 2;
    private bool useAutoCommit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseAutoCommit {
      get { return useAutoCommit_; }
      set {
        useAutoCommit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAutoCommitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAutoCommitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      if (UseAutoCommit != other.UseAutoCommit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (UseAutoCommit != false) hash ^= UseAutoCommit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (UseAutoCommit != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseAutoCommit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (UseAutoCommit != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAutoCommitRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      if (other.UseAutoCommit != false) {
        UseAutoCommit = other.UseAutoCommit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
          case 16: {
            UseAutoCommit = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionRequest : pb::IMessage<TransactionRequest> {
    private static readonly pb::MessageParser<TransactionRequest> _parser = new pb::MessageParser<TransactionRequest>(() => new TransactionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dmstar.net.Proto.DatabaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest(TransactionRequest other) : this() {
      connectionId_ = other.connectionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest Clone() {
      return new TransactionRequest(this);
    }

    /// <summary>Field number for the "connectionId" field.</summary>
    public const int ConnectionIdFieldNumber = 1;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectionId != other.ConnectionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConnectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
